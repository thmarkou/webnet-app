import AsyncStorage from '@react-native-async-storage/async-storage';
import { 
  getCategories as getCategoriesFirestore, 
  addCategory as addCategoryFirestore,
  updateCategory as updateCategoryFirestore,
  deleteCategory as deleteCategoryFirestore,
  getCities as getCitiesFirestore,
  addCity as addCityFirestore,
  updateCity as updateCityFirestore,
  deleteCity as deleteCityFirestore
} from '../firebase/firestore';

// Storage keys
const PROFESSIONS_KEY = 'app_professions';
const CITIES_KEY = 'app_cities';

// Default data
const DEFAULT_PROFESSIONS = [
  { id: 'plumber', name: 'Œ•Œ¥œÅŒ±œÖŒªŒπŒ∫œåœÇ', icon: 'üîß' },
  { id: 'electrician', name: 'ŒóŒªŒµŒ∫œÑœÅŒøŒªœåŒ≥ŒøœÇ', icon: '‚ö°' },
  { id: 'mechanic', name: 'ŒúŒ∑œáŒ±ŒΩŒπŒ∫œåœÇ ŒëœÖœÑŒøŒ∫ŒπŒΩŒÆœÑœâŒΩ', icon: 'üî©' },
  { id: 'painter', name: 'ŒíŒ±œÜŒ≠Œ±œÇ', icon: 'üé®' },
  { id: 'carpenter', name: 'ŒûœÖŒªŒøœÖœÅŒ≥œåœÇ', icon: 'ü™ö' },
  { id: 'gardener', name: 'ŒöŒ∑œÄŒøœÖœÅœåœÇ', icon: 'üå±' },
  { id: 'cleaner', name: 'ŒöŒ±Œ∏Œ±œÅŒπœÉœÑŒÆœÇ', icon: 'üßΩ' },
  { id: 'cook', name: 'ŒúŒ±Œ≥ŒµŒØœÅŒ±œÇ', icon: 'üë®‚Äçüç≥' },
  { id: 'driver', name: 'ŒüŒ¥Œ∑Œ≥œåœÇ', icon: 'üöó' },
  { id: 'teacher', name: 'ŒîŒ¨œÉŒ∫Œ±ŒªŒøœÇ', icon: 'üë®‚Äçüè´' },
  { id: 'doctor', name: 'ŒìŒπŒ±œÑœÅœåœÇ', icon: 'üë®‚Äç‚öïÔ∏è' },
  { id: 'lawyer', name: 'ŒîŒπŒ∫Œ∑Œ≥œåœÅŒøœÇ', icon: '‚öñÔ∏è' },
  { id: 'accountant', name: 'ŒõŒøŒ≥ŒπœÉœÑŒÆœÇ', icon: 'üìä' },
  { id: 'architect', name: 'ŒëœÅœáŒπœÑŒ≠Œ∫œÑŒøŒΩŒ±œÇ', icon: 'üèóÔ∏è' },
  { id: 'engineer', name: 'ŒúŒ∑œáŒ±ŒΩŒπŒ∫œåœÇ Œ†ŒøŒªŒπœÑŒπŒ∫œéŒΩ ŒàœÅŒ≥œâŒΩ', icon: '‚öôÔ∏è' },
  { id: 'designer', name: 'Œ£œáŒµŒ¥ŒπŒ±œÉœÑŒÆœÇ', icon: 'üé®' },
  { id: 'photographer', name: 'Œ¶œâœÑŒøŒ≥œÅŒ¨œÜŒøœÇ', icon: 'üì∏' },
  { id: 'hairdresser', name: 'ŒöŒøŒºŒºœâœÑŒÆœÇ', icon: 'üíá‚Äç‚ôÇÔ∏è' },
  { id: 'massage', name: 'ŒúŒ±œÉŒ≠œÅ', icon: 'üíÜ‚Äç‚ôÇÔ∏è' },
  { id: 'personal_trainer', name: 'Œ†œÅŒøœÉœâœÄŒπŒ∫œåœÇ ŒìœÖŒºŒΩŒ±œÉœÑŒÆœÇ', icon: 'üí™' },
  { id: 'psychologist', name: 'Œ®œÖœáŒøŒªœåŒ≥ŒøœÇ', icon: 'üß†' },
  { id: 'dentist', name: 'ŒüŒ¥ŒøŒΩœÑŒØŒ±œÑœÅŒøœÇ', icon: 'ü¶∑' },
  { id: 'veterinarian', name: 'ŒöœÑŒ∑ŒΩŒØŒ±œÑœÅŒøœÇ', icon: 'üêï' },
  { id: 'translator', name: 'ŒúŒµœÑŒ±œÜœÅŒ±œÉœÑŒÆœÇ', icon: 'üåê' },
  { id: 'programmer', name: 'Œ†œÅŒøŒ≥œÅŒ±ŒºŒºŒ±œÑŒπœÉœÑŒÆœÇ', icon: 'üíª' },
  { id: 'marketing', name: 'ŒúŒ¨œÅŒ∫ŒµœÑŒπŒΩŒ≥Œ∫', icon: 'üìà' },
  { id: 'sales', name: 'Œ†œâŒªŒÆœÉŒµŒπœÇ', icon: 'üí∞' },
  { id: 'customer_service', name: 'ŒïŒæœÖœÄŒ∑œÅŒ≠œÑŒ∑œÉŒ∑ Œ†ŒµŒªŒ±œÑœéŒΩ', icon: 'üéß' },
  { id: 'security', name: 'ŒëœÉœÜŒ¨ŒªŒµŒπŒ±', icon: 'üõ°Ô∏è' },
  { id: 'delivery', name: 'Œ†Œ±œÅŒ¨Œ¥ŒøœÉŒ∑', icon: 'üì¶' },
  { id: 'car_mechanic', name: 'ŒúŒ∑œáŒ±ŒΩŒπŒ∫œåœÇ ŒëœÖœÑŒøŒ∫ŒπŒΩŒÆœÑœâŒΩ', icon: 'üöó' },
  { id: 'journalist', name: 'ŒîŒ∑ŒºŒøœÉŒπŒøŒ≥œÅŒ¨œÜŒøœÇ', icon: 'üì∫' },
];

const DEFAULT_CITIES = [
  { id: '', name: 'ŒåŒªŒµœÇ ŒøŒπ Œ†œåŒªŒµŒπœÇ' },
  { id: 'athens', name: 'ŒëŒ∏ŒÆŒΩŒ±' },
  { id: 'thessaloniki', name: 'ŒòŒµœÉœÉŒ±ŒªŒøŒΩŒØŒ∫Œ∑' },
  { id: 'patras', name: 'Œ†Œ¨œÑœÅŒ±' },
  { id: 'heraklion', name: 'ŒóœÅŒ¨Œ∫ŒªŒµŒπŒø' },
  { id: 'larissa', name: 'ŒõŒ¨œÅŒπœÉŒ±' },
  { id: 'volos', name: 'ŒíœåŒªŒøœÇ' },
  { id: 'ioannina', name: 'ŒôœâŒ¨ŒΩŒΩŒπŒΩŒ±' },
  { id: 'kavala', name: 'ŒöŒ±Œ≤Œ¨ŒªŒ±' },
  { id: 'komotini', name: 'ŒöŒøŒºŒøœÑŒ∑ŒΩŒÆ' },
  { id: 'serres', name: 'Œ£Œ≠œÅœÅŒµœÇ' },
  { id: 'drama', name: 'ŒîœÅŒ¨ŒºŒ±' },
  { id: 'xanthi', name: 'ŒûŒ¨ŒΩŒ∏Œ∑' },
  { id: 'alexandroupoli', name: 'ŒëŒªŒµŒæŒ±ŒΩŒ¥œÅŒøœçœÄŒøŒªŒ∑' },
  { id: 'kalamata', name: 'ŒöŒ±ŒªŒ±ŒºŒ¨œÑŒ±' },
  { id: 'nea_moudania', name: 'ŒùŒ≠Œ± ŒúŒøœÖŒ¥Œ±ŒΩŒπŒ¨' },
  { id: 'tripoli', name: 'Œ§œÅŒØœÄŒøŒªŒ∑' },
  { id: 'sparti', name: 'Œ£œÄŒ¨œÅœÑŒ∑' },
  { id: 'corinth', name: 'ŒöœåœÅŒπŒΩŒ∏ŒøœÇ' },
  { id: 'argos', name: 'ŒÜœÅŒ≥ŒøœÇ' },
  { id: 'nafplio', name: 'ŒùŒ±œçœÄŒªŒπŒø' },
  { id: 'rhodes', name: 'Œ°œåŒ¥ŒøœÇ' },
  { id: 'mykonos', name: 'ŒúœçŒ∫ŒøŒΩŒøœÇ' },
  { id: 'santorini', name: 'Œ£Œ±ŒΩœÑŒøœÅŒØŒΩŒ∑' },
  { id: 'crete', name: 'ŒöœÅŒÆœÑŒ∑' },
  { id: 'lesvos', name: 'ŒõŒ≠œÉŒ≤ŒøœÇ' },
  { id: 'chios', name: 'ŒßŒØŒøœÇ' },
  { id: 'samos', name: 'Œ£Œ¨ŒºŒøœÇ' },
  { id: 'zakynthos', name: 'ŒñŒ¨Œ∫œÖŒΩŒ∏ŒøœÇ' },
  { id: 'kefalonia', name: 'ŒöŒµœÜŒ±ŒªŒøŒΩŒπŒ¨' },
];

// Initialize tables with default data
export const initializeTables = async () => {
  try {
    // Force update cities every time to ensure latest data
    await AsyncStorage.removeItem(CITIES_KEY); // Clear old data
    await AsyncStorage.setItem(CITIES_KEY, JSON.stringify(DEFAULT_CITIES));
    console.log('‚úÖ Cities table initialized with latest data including ŒùŒ≠Œ± ŒúŒøœÖŒ¥Œ±ŒΩŒπŒ¨');

    // Initialize professions only if not exists
    const existingProfessions = await AsyncStorage.getItem(PROFESSIONS_KEY);
    if (!existingProfessions) {
      await AsyncStorage.setItem(PROFESSIONS_KEY, JSON.stringify(DEFAULT_PROFESSIONS));
      console.log('Initialized professions table');
    }
    
    // Log for debugging
    const cities = await AsyncStorage.getItem(CITIES_KEY);
    const parsedCities = cities ? JSON.parse(cities) : [];
    const neaMoudaniaExists = parsedCities.some(c => c.name === 'ŒùŒ≠Œ± ŒúŒøœÖŒ¥Œ±ŒΩŒπŒ¨');
    console.log(neaMoudaniaExists ? '‚úÖ ŒùŒ≠Œ± ŒúŒøœÖŒ¥Œ±ŒΩŒπŒ¨ found in cities' : '‚ùå ŒùŒ≠Œ± ŒúŒøœÖŒ¥Œ±ŒΩŒπŒ¨ NOT found in cities');
    console.log('Total cities:', parsedCities.length);
  } catch (error) {
    console.error('Error initializing tables:', error);
  }
};

// Professions CRUD operations
export const getProfessions = async () => {
  try {
    // Try Firestore first (common database)
    const categories = await getCategoriesFirestore();
    if (categories && categories.length > 0) {
      // Map categories to professions format
      // Filter out duplicates by name (keep first occurrence)
      const seenNames = new Set<string>();
      const uniqueCategories = categories.filter(cat => {
        if (seenNames.has(cat.name)) {
          console.log(`‚ö†Ô∏è Duplicate category name found: ${cat.name}, skipping`);
          return false;
        }
        seenNames.add(cat.name);
        return true;
      });
      
      return uniqueCategories.map(cat => ({
        id: cat.id,
        name: cat.name,
        icon: cat.icon || 'üîß'
      }));
    }
  } catch (error) {
    console.log('‚ö†Ô∏è Firestore categories not available, using AsyncStorage fallback');
  }
  
  // Fallback to AsyncStorage
  try {
    const professionsJson = await AsyncStorage.getItem(PROFESSIONS_KEY);
    return professionsJson ? JSON.parse(professionsJson) : DEFAULT_PROFESSIONS;
  } catch (error) {
    console.error('Error getting professions:', error);
    return DEFAULT_PROFESSIONS;
  }
};

export const addProfession = async (profession: { name: string; icon?: string }) => {
  try {
    // Try Firestore first (common database)
    const categoryId = await addCategoryFirestore({
      name: profession.name,
      icon: profession.icon
    });
    console.log('‚úÖ Profession added to Firestore:', profession.name);
    return {
      id: categoryId,
      name: profession.name,
      icon: profession.icon || 'üîß'
    };
  } catch (error) {
    console.log('‚ö†Ô∏è Firestore add failed, using AsyncStorage fallback');
    // Fallback to AsyncStorage
    try {
      const professions = await getProfessions();
      const newProfession = {
        id: `prof_${Date.now()}`,
        name: profession.name,
        icon: profession.icon || 'üîß'
      };
      professions.push(newProfession);
      await AsyncStorage.setItem(PROFESSIONS_KEY, JSON.stringify(professions));
      console.log('Added new profession to AsyncStorage:', newProfession.name);
      return newProfession;
    } catch (storageError) {
      console.error('Error adding profession:', storageError);
      throw new Error('ŒëŒ¥œÖŒΩŒ±ŒºŒØŒ± œÄœÅŒøœÉŒ∏ŒÆŒ∫Œ∑œÇ ŒµœÄŒ±Œ≥Œ≥Œ≠ŒªŒºŒ±œÑŒøœÇ');
    }
  }
};

// Cities CRUD operations
export const getCities = async () => {
  try {
    // Try Firestore first (common database)
    const cities = await getCitiesFirestore();
    if (cities && cities.length > 0) {
      return cities.map(city => ({
        id: city.id,
        name: city.name
      }));
    }
  } catch (error) {
    console.log('‚ö†Ô∏è Firestore cities not available, using AsyncStorage fallback');
  }
  
  // Fallback to AsyncStorage
  try {
    const citiesJson = await AsyncStorage.getItem(CITIES_KEY);
    return citiesJson ? JSON.parse(citiesJson) : DEFAULT_CITIES;
  } catch (error) {
    console.error('Error getting cities:', error);
    return DEFAULT_CITIES;
  }
};

export const addCity = async (city: { name: string }) => {
  try {
    // Try Firestore first (common database)
    const cityId = await addCityFirestore({
      name: city.name
    });
    console.log('‚úÖ City added to Firestore:', city.name);
    return {
      id: cityId,
      name: city.name
    };
  } catch (error) {
    console.log('‚ö†Ô∏è Firestore add failed, using AsyncStorage fallback');
    // Fallback to AsyncStorage
    try {
      const cities = await getCities();
      const newCity = {
        id: `city_${Date.now()}`,
        name: city.name
      };
      cities.push(newCity);
      await AsyncStorage.setItem(CITIES_KEY, JSON.stringify(cities));
      console.log('Added new city to AsyncStorage:', newCity.name);
      return newCity;
    } catch (storageError) {
      console.error('Error adding city:', storageError);
      throw new Error('ŒëŒ¥œÖŒΩŒ±ŒºŒØŒ± œÄœÅŒøœÉŒ∏ŒÆŒ∫Œ∑œÇ œÄœåŒªŒ∑œÇ');
    }
  }
};

// Update existing records
export const updateProfession = async (id: string, updates: { name?: string; icon?: string }) => {
  try {
    // Try Firestore first (common database)
    await updateCategoryFirestore(id, updates);
    console.log('‚úÖ Profession updated in Firestore:', id);
    return { id, ...updates };
  } catch (error) {
    console.log('‚ö†Ô∏è Firestore update failed, using AsyncStorage fallback');
    // Fallback to AsyncStorage
    try {
      const professions = await getProfessions();
      const index = professions.findIndex(p => p.id === id);
      if (index !== -1) {
        professions[index] = { ...professions[index], ...updates };
        await AsyncStorage.setItem(PROFESSIONS_KEY, JSON.stringify(professions));
        console.log('Updated profession in AsyncStorage:', professions[index].name);
        return professions[index];
      }
      throw new Error('Profession not found');
    } catch (storageError) {
      console.error('Error updating profession:', storageError);
      throw storageError;
    }
  }
};

export const updateCity = async (id: string, updates: { name?: string }) => {
  try {
    // Try Firestore first (common database)
    await updateCityFirestore(id, updates);
    console.log('‚úÖ City updated in Firestore:', id);
    return { id, ...updates };
  } catch (error) {
    console.log('‚ö†Ô∏è Firestore update failed, using AsyncStorage fallback');
    // Fallback to AsyncStorage
    try {
      const cities = await getCities();
      const index = cities.findIndex(c => c.id === id);
      if (index !== -1) {
        cities[index] = { ...cities[index], ...updates };
        await AsyncStorage.setItem(CITIES_KEY, JSON.stringify(cities));
        console.log('Updated city in AsyncStorage:', cities[index].name);
        return cities[index];
      }
      throw new Error('City not found');
    } catch (storageError) {
      console.error('Error updating city:', storageError);
      throw storageError;
    }
  }
};

// Delete records
export const deleteProfession = async (id: string) => {
  try {
    // Try Firestore first (common database)
    await deleteCategoryFirestore(id);
    console.log('‚úÖ Profession deleted from Firestore:', id);
    return true;
  } catch (error) {
    console.log('‚ö†Ô∏è Firestore delete failed, using AsyncStorage fallback');
    // Fallback to AsyncStorage
    try {
      const professions = await getProfessions();
      const filtered = professions.filter(p => p.id !== id);
      await AsyncStorage.setItem(PROFESSIONS_KEY, JSON.stringify(filtered));
      console.log('Deleted profession from AsyncStorage with id:', id);
      return true;
    } catch (storageError) {
      console.error('Error deleting profession:', storageError);
      throw storageError;
    }
  }
};

export const deleteCity = async (id: string) => {
  try {
    // Try Firestore first (common database)
    await deleteCityFirestore(id);
    console.log('‚úÖ City deleted from Firestore:', id);
    return true;
  } catch (error) {
    console.log('‚ö†Ô∏è Firestore delete failed, using AsyncStorage fallback');
    // Fallback to AsyncStorage
    try {
      const cities = await getCities();
      const filtered = cities.filter(c => c.id !== id);
      await AsyncStorage.setItem(CITIES_KEY, JSON.stringify(filtered));
      console.log('Deleted city from AsyncStorage with id:', id);
      return true;
    } catch (storageError) {
      console.error('Error deleting city:', storageError);
      throw storageError;
    }
  }
};
